Explanation of Formulas for Holonomic Wheel Setups

by Emmett Weisz on behalf of MTA Lionotics (FTC teams 5361 and 13475)

*** INTRO ***

This document explains how and why to use certain formulas to control a robot with holonomic wheels.
 A holonomic wheel setup is one that allows the robot to move in any direction, as opposed to
 this setup:
 |     |

 |     |, which cannot move side to side.

The robot is rigid, and therefore, it can only move in a combination of rigid motions: translation,
 rotation, and reflection. Although 13475's robot is bound to undergo a reflection during the
 competition, that would never happen to 5361. Therefore, the robot has three degrees of freedom:
 two dimensions of translation (x and y) and one dimension of rotation about the center (z).

This means that in almost all cases, the motion of any three omni/mecanum wheels of a robot
 completely determines its motion. The robot could theoretically have only three omniwheels, like
 this:
     __

  \      /
  but that would be incredibly difficult to code and would not fit well on a square robot.

 The wheels could be set up like this |  --  |, but that configuration would not hold up the robot
 without additional wheels. However, there is a very similar holonomic setup with five omniwheels
 that is the simplest holonomic setup to code:

 |      |
    --
 |      |

 Team 5361 used this in 2019-2020.
 In this setup, the power to FL must equal BL, and FR = BR. Therefore, each of the three degrees of
 freedom can be controlled separately without any calculations. (for front/back and rotation ignore
 the center wheel and pretend the others are traction wheels, for strafing use only the center
 wheel). This avoids many of the problems of a symmetrical four-wheeled holonomic system, but the
 center wheel takes up extra space.

Therefore, we often use a symmetrical four-wheeled configuration. This setup is identical to mecanum
 wheels, and similar to a wheel configuration with one wheel at the center of each edge, but rotated
 45 degrees.However, this adds a complication: given the speeds of three of the wheels, there is
 only one possible speed the fourth omniwheel can move such that none of the wheels slip. For now,
 let's assume we don't want any of the wheels to slip.

*** MOVEMENT WITHOUT SLIPPING ***

The robot has three degrees of freedom: front/back movement, right/left movement, and rotation. To
do a combination of them at once, we calculate how to do each one separately, then add together the
results for each wheel. (To see why this works, imagine your point of view rotating with the robot,
but not moving. The robot now seems to be strafing without rotating. Now going back to a stationary
point of view, just add the values for a pure rotation. So we can add the values for a translation
and a rotation to get any movement. Same logic for adding vertical and horizontal motion.)

The robot is set up like this, where positive values go forward (up):
/FL  FR\

\BL  BR/

The power for each wheel is given by:
powerFL = forward + right + rotateClockwise
powerFR = forward - right - rotateClockwise
powerBR = forward + right - rotateClockwise
powerBL = forward - right + rotateClockwise

We can combine these equations to give:
powerFL + powerFR = powerBL + powerBR. <---- #*#*# THE HOLONOMIC EQUATION #*#*#
This means that for the robot not to slip, it has to have a consistent forward/backward speed.
There's nothing special about the forward direction. We can rearrange the above equation as
powerFL - powerBL = powerBR - powerFR.
This means it has a consistent right/left speed. Or,
powerFL - powerBR = powerBL - powerFR,
meaning it has a consistent rotational speed. Although these three equations seem to be saying
different things, they are all equivalent.

As you can see, this completely symmetrical holonomic setup is more complicated than the
five-wheeled one. The advantage is that it can have equally consistent movement horizontally and
vertically, and it takes up less space on the robot.

*** LIMITATIONS OF MOTION ***

For low speeds, the equation (in three version) above works fine. However, if we want the robot to
go quickly, we run into a problem. The power set to any motor must be between 1 and -1. If the
equation tells us to move a motor faster than that, we have two options: we can either slow all the
motors down proportionally, or we can just move that motor at the maximum speed and leave everything
else alone. This is a potentially important tradeoff between speed and consistency, since at least
one of the wheels must slip if the equation is not satisfied.

For example, what happens if we want to rotate the robot, pivoting about one of the wheels, say BR?
If we follow the equation for movement without slipping, the power for BR will be 0, FL will be set
to full power, and FR and BL will be set to half power. What will happen if we set FR and BL to full
power? Will it go slightly faster, twice as fast, or no faster at all? Will the slipping of the
wheels ruin the consistency? Or will the wheels have such good traction that they don't slip at all,
but push back against the motors?

*** LIMITATIONS OF THE GAMEPAD ***

When graphing the possible values of the gamepad, they form a regular octagon with minimum radius 1.
The center of the octagon is (0,0). Ignore rotation of the robot for the moment. The possible values
for forwardLeftPower and forwardRightPower form a square. Every point on the octagon must correspond
to a point on the square. So, either the octagon does not cover the square (meaning there will be
some velocities that cannot be reached with the gamepad, even though they are possible), or the
octagon is distorted to match the square. Choosing between these two options is another tradeoff
between speed and precision. However, if we don't want to be able to move as fast as possible, we
can make the "octagon" smaller than the square so that it fits inside, and the outer edges of the
square corresponding to faster speeds will not be covered.

*** ANOTHER APPROACH *** (This is unfinished. Trial and error, taking into account the holonomic
equation whose name I made up, is probably the best way of coding more complicated motion.)

Any rigid motion that preserves orientation is either a translation or a rotation. We already know
how to code translation easily using the previous approach. However, for autonomous, it would be
useful to have a method to rotate the robot by a given angle about an arbitrary point. Or,
equivalently, for the robot to travel a certain distance, in a certain direction with respect to
the robot, with a certain constant curvature.

To calculate the necessary powers for the latter method, we calculate the translational components
as above. The curvature is the inverse of the radius, which in turn is proportional to the
circumference of the circle of rotation. The robot needs to rotate a full turn about its center
in the time it takes to travel the circumference of the circle.
*
The amount of time to travel the circumference of the circle is exactly the amount of time it would
take to travel the distance of the circumference of the circle if we took out the rotation-about-
the-center component of its motion. To see why this is true precisely,* consider what happens when
we add two motions together (i.e. add the powers from each of two motions to each individual wheel).
For example, if we combine a left motion and a forward motion of 1 foot each, we get a diagonal
motion of sqrt(2) feet. However, if we add a certain motion to both the robot and the frame of
reference, nothing changes. For example, there is no difference between me standing still and the
robot moving one foot to the left, or me moving one foot forward and the robot moving sqrt(2) feet
forward-left. In both cases, I see the robot moving one foot to the left. The same idea applies to
rotation. If I stand still and the robot moves forward a distance




*The amount of time to travel the circumference of the circle is exactly the amount of time it would
take to travel the distance of the circumference of the circle if we took out the rotation-about-
the-center component of its motion. To see why this is true precisely, let the circumference of the
circle be c, and let n be an integer >1. Let the robot move translationally for a distance of c/n
in the initial direction of our desired path. Then let it rotate by an angle of 2π/n radians. The
composite motion must be a rotation of 2π/n about some point in space; furthermore, this point has
not moved relative to the robot. If we do the translation+rotation again, the robot will rotate
another 2π/n about the same point. If we do the translation+rotation a total of n times, the robot
will have traced an EXACT circle, and it will have traveled a distance c. The robot will end up
back where it started, because the total motion was a rotation of 2π.
As we let n approach infinity, the distance the robot travels in its polygonal path will approach
the circumference of the circle its path traces. This circle must be the actual path we want for the
robot, because it is the only circle with circumference c and the desired initial direction. Oops,
I just realized after finishing this that the entire argument I made ignores time, so it doesn't
actually prove what I wanted. This proof doesn't work.

Footnote: we are dealing with two different but related concepts here. One is rigid motions,
which can be composed one after the other. The other is velocity fields (which are vector fields),
which can be added. The latter is the derivative of the former. Both are implemented in our code
(motions with encoderDrive(), velocity fields with power).